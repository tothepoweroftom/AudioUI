// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import AVFoundation;
@import QuartzCore;
@import CoreImage;
@import Foundation;
@import ReplayKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIView;
@class LayerView;
@class Layer;
@class CALayer;
@class UIRotationGestureRecognizer;

/// The View class defines a rectangular area on the screen and the interfaces for managing visual content in that area. The View class itself provides basic behavior for filling its rectangular area with a background color. More sophisticated content can be presented by subclassing UIView and implementing the necessary drawing and event-handling code yourself. The C4 framework also includes a set of standard subclasses that range from simple shapes to movies and images that can be used as-is.
SWIFT_CLASS("_TtC2C44View")
@interface View : NSObject
/// A UIView. Internally, View wraps and provides access to an internal UIView.
@property (nonatomic, strong) UIView * _Nonnull view;
/// The current rotation value of the view. Animatable.
///
/// returns:
/// A Double value representing the cumulative rotation of the view, measured in Radians.
@property (nonatomic) double rotation;
/// The view that contains the receiver’s animatable layer.
@property (nonatomic, readonly, strong) LayerView * _Nonnull layerView;
/// The view’s primary layer.
///
/// returns:
/// A Layer, whose properties are animatable (e.g. rotation)
@property (nonatomic, readonly, strong) Layer * _Nonnull animatableLayer;
/// Initializes a View.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new View from a UIView.
/// \param view A UIView.
///
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCopyView:(View * _Nonnull)copyView OBJC_DESIGNATED_INITIALIZER;
- (void)copyViewStyle:(View * _Nonnull)viewToCopy;
/// Returns the receiver’s layer.
@property (nonatomic, readonly, strong) CALayer * _Nullable layer;
/// A Boolean indicating whether subviews, and layers are clipped to the object’s bounds. Animatable.
@property (nonatomic) BOOL masksToBounds;
/// Returns the receiver’s frame width. Animatable.
@property (nonatomic, readonly) double width;
/// Returns the receiver’s frame height. Animatable.
@property (nonatomic, readonly) double height;
/// Returns the receiver’s opacity. Animatable.
@property (nonatomic) double opacity;
/// Returns true if the receiver is hidden, false if visible.
@property (nonatomic) BOOL hidden;
/// The layer’s position on the z axis. Animatable.
/// The default value of this property is 0. Changing the value of this property changes the the front-to-back ordering of layers onscreen. This can affect the visibility of layers whose frame rectangles overlap.
/// The value of this property is measured in points.
@property (nonatomic) double zPosition;
/// An optional view whose alpha channel is used to mask the receiver’s content.
/// The mask view’s alpha channel determines how much of the receiver’s content and background shows through. Fully or partially opaque pixels allow the underlying content to show through but fully transparent pixels block that content.
/// The default value of this property is nil. When configuring a mask, remember to set the size and position of the mask layer to ensure it is aligned properly with the layer it masks.
/// The layer you assign to this property must not have a superlayer. If it does, the behavior is undefined.
@property (nonatomic, strong) View * _Nullable mask;
/// Returns true if the receiver accepts touch events.
@property (nonatomic) BOOL interactionEnabled;
/// Adds a rotation gesture recognizer to the receiver’s view.
/// \code
/// let f = Rect(0,0,100,100)
/// let v = View(frame: f)
/// v.addRotationGestureRecognizer { rotation, velocity, state in
///     println("rotated")
/// }
///
/// \endcode\param action A block of code to be executed when the receiver recognizes a rotation gesture.
///
///
/// returns:
/// A UIRotationGestureRecognizer that can be customized.
- (UIRotationGestureRecognizer * _Nonnull)addRotationGestureRecognizer:(void (^ _Nonnull)(double, double, UIGestureRecognizerState))action SWIFT_WARN_UNUSED_RESULT;
/// Unlinks the view from its superview and its window, and removes it from the responder chain.
/// If the view’s superview is not nil, the superview releases the view.
/// Calling this method removes any constraints that refer to the view you are removing, or that refer to any view in the
/// subtree of the view you are removing.
/// \code
/// let v = View(frame: Rect(0,0,100,100))
/// let subv = View(frame: Rect(25,25,50,50))
/// v.add(subv)
/// subv.removeFromSuperview()
///
/// \endcode
- (void)removeFromSuperview;
/// Moves the receiver so that it appears on top of the specified view.
/// \param view The view above which the receive will be positioned
///
- (void)positionAbove:(View * _Nonnull)view;
/// Moves the receiver so that it appears on below of the specified view.
/// \param view The view below which the receive will be positioned
///
- (void)positionBelow:(View * _Nonnull)view;
@end

@class ShapeLayer;
@class Gradient;
@class NSNumber;

/// Shape is a concrete subclass of View that draws a bezier path in its coordinate space.
SWIFT_CLASS("_TtC2C45Shape")
@interface Shape : View
/// Shape’s contents are drawn on a ShapeLayer.
@property (nonatomic, readonly, strong) ShapeLayer * _Nonnull shapeLayer;
/// Initializes an empty Shape.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Shape from the properties of another Shape. Essentially, this copies the provided shape.
/// \param shape A Shape around which the new shape is created.
///
- (nonnull instancetype)initWithCopy:(Shape * _Nonnull)original;
/// An optional variable representing a gradient. If this is non-nil, then the shape will appear to be filled with a gradient.
@property (nonatomic, strong) Gradient * _Nullable gradientFill;
/// Adjusts the shape’s frame to the bounding bounding box of its specified path.
- (void)adjustToFitPath;
/// The line width used when stroking the path. Defaults to 1.0. Animatable.
@property (nonatomic) double lineWidth;
/// The current rotation value of the view. Animatable.
///
/// returns:
/// A Double value representing the cumulative rotation of the view, measured in Radians.
@property (nonatomic) double rotation;
/// This value defines the start of the path used to draw the stroked outline. The value must be in the range [0,1]
/// with zero representing the start of the path and one the end. Values in between zero and one are interpolated
/// linearly along the path length. Defaults to zero. Animatable.
@property (nonatomic) double strokeStart;
/// This value defines the end of the path used to draw the stroked outline. The value must be in the range [0,1]
/// with zero representing the start of the path and one the end. Values in between zero and one are interpolated
/// linearly along the path length. Defaults to 1.0. Animatable.
@property (nonatomic) double strokeEnd;
/// The miter limit used when stroking the path. Defaults to ten. Animatable.
@property (nonatomic) double miterLimit;
/// The phase of the dashing pattern applied when creating the stroke. Defaults to zero. Animatable.
@property (nonatomic) double lineDashPhase;
/// The dash pattern applied when creating the stroked version of the path. Defaults to nil.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nullable lineDashPattern;
/// The size of the receiver including the width of its stroke.
///
/// returns:
/// The bounding box that surrounds the shape and its line.
- (CGSize)intrinsicContentSize SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is no path.
- (BOOL)isEmpty SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCopyView:(View * _Nonnull)copyView SWIFT_UNAVAILABLE;
@end


/// Arc is a concrete subclass of Shape that has a special initialzer that creates an arc whose shape is defined by rotating around a specified point.
SWIFT_CLASS("_TtC2C43Arc")
@interface Arc : Shape
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// AudioPlayer provides playback of audio data from a file or memory.
/// Using an audio player you can:
/// Play sounds of any duration
/// Play sounds from files or memory buffers
/// Loop sounds
/// Play multiple sounds simultaneously, one sound per audio player, with precise synchronization
/// Control relative playback level, stereo positioning, and playback rate for each sound you are playing
/// Seek to a particular point in a sound file, which supports such application features as fast forward and rewind
/// Obtain data you can use for playback-level metering
SWIFT_CLASS("_TtC2C411AudioPlayer")
@interface AudioPlayer : NSObject <AVAudioPlayerDelegate>
/// Initializes a new audio player from a given file name
/// \code
/// let ap = AudioPlayer("audioTrackFileName")
///
/// \endcode
- (nullable instancetype)init:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCopy:(AudioPlayer * _Nonnull)original;
/// Plays a sound asynchronously.
- (void)play;
/// Pauses playback; sound remains ready to resume playback from where it left off.
/// Calling pause leaves the audio player prepared to play; it does not release the audio hardware that was acquired upon
/// calling play or prepareToPlay.
- (void)pause;
/// Stops playback and undoes the setup needed for playback.
/// Calling this method, or allowing a sound to finish playing, undoes the setup performed upon calling the play or
/// prepareToPlay methods.
/// The stop method does not reset the value of the currentTime property to 0. In other words, if you call stop during
/// playback and then call play, playback resumes at the point where it left off.
- (void)stop;
/// Returns the total duration, in seconds, of the sound associated with the audio player. (read-only)
@property (nonatomic, readonly) double duration;
/// Returns true if the receiver’s current playback rate > 0. Otherwise returns false.
@property (nonatomic, readonly) BOOL playing;
/// The audio player’s stereo pan position.
/// By setting this property you can position a sound in the stereo field. A value of –1.0 is full left, 0.0 is center, and
/// 1.0 is full right.
@property (nonatomic) double pan;
/// The playback volume for the audio player, ranging from 0.0 through 1.0 on a linear scale.
/// A value of 0.0 indicates silence; a value of 1.0 (the default) indicates full volume for the audio player instance.
/// Use this property to control an audio player’s volume relative to other audio output.
/// To provide UI in iOS for adjusting system audio playback volume, use the MPVolumeView class, which provides media
/// playback controls that users expect and whose appearance you can customize.
@property (nonatomic) double volume;
/// The playback point, in seconds, within the timeline of the sound associated with the audio player.
/// If the sound is playing, currentTime is the offset of the current playback position, measured in seconds from the start
/// of the sound. If the sound is not playing, currentTime is the offset of where playing starts upon calling the play
/// method, measured in seconds from the start of the sound.
/// By setting this property you can seek to a specific point in a sound file or implement audio fast-forward and rewind
/// functions.
@property (nonatomic) double currentTime;
/// The audio player’s playback rate.
/// This property’s default value of 1.0 provides normal playback rate. The available range is from 0.5 for half-speed
/// playback through 2.0 for double-speed playback.
/// To set an audio player’s playback rate, you must first enable rate adjustment as described in the enableRate property
/// description.
/// \code
/// let ap = AudioPlayer("audioTrackFileName")
/// ap.enableRate = true
/// ap.rate = 0.5
/// ap.play()
///
/// \endcode
@property (nonatomic) double rate;
/// The number of times a sound will return to the beginning, upon reaching the end, to repeat playback.
/// A value of 0, which is the default, means to play the sound once. Set a positive integer value to specify the number of
/// times to return to the start and play again. For example, specifying a value of 1 results in a total of two plays of the
/// sound. Set any negative integer value to loop the sound indefinitely until you call the stop method.
/// Defaults to 1000000.
@property (nonatomic) BOOL loops;
/// A Boolean value that specifies the audio-level metering on/off state for the audio player.
/// The default value for the meteringEnabled property is off (Boolean false). Before using metering for an audio player, you need to enable it by setting this
/// property to true. If player is an audio player instance variable of your controller class, you enable metering as shown here:
/// \code
/// let ap = AudioPlayer("audioTrackFileName")
/// ap.meteringEnabled = true
///
/// \endcode
@property (nonatomic) BOOL meteringEnabled;
/// A Boolean value that specifies whether playback rate adjustment is enabled for an audio player.
/// To enable adjustable playback rate for an audio player, set this property to true after you initialize the player and before you call the prepareToPlay
/// instance method for the player.
@property (nonatomic) BOOL enableRate;
/// Refreshes the average and peak power values for all channels of an audio player.
/// To obtain current audio power values, you must call this method before calling averagePowerForChannel: or peakPowerForChannel:.
/// \code
/// let t = NSTimer.scheduledTimerWithTimeInterval(1.0/60.0,
///                                        target: self,
///                                      selector: "update",
///                                      userInfo: nil,
///                                       repeats: true)
/// let ap = AudioPlayer("audioTrackFileName")
/// ap.meteringEnabled = true
/// func update() {
///     ap.updateMeters()
/// }
///
/// \endcode
- (void)updateMeters;
/// Returns the average power for a given channel, in decibels, for the sound being played.
/// \code
/// func update() {
///     let av = player.averagePower(channel: 0)
/// }
///
/// \endcode\param channel The audio channel whose average power value you want to obtain.
///
///
/// returns:
/// A floating-point representation, in decibels, of a given audio channel’s current average power.
- (double)averagePower:(NSInteger)channel SWIFT_WARN_UNUSED_RESULT;
/// Returns the peak power for a given channel, in decibels, for the sound being played.
/// \code
/// func update() {
///     let pk = player.peakPower(channel: 0)
/// }
/// - parameter channel: The audio channel whose peak power value you want to obtain.
/// - returns: A floating-point representation, in decibels, of a given audio channel’s current peak power.
///
/// \endcode
- (double)peakPower:(NSInteger)channel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface CABasicAnimation (SWIFT_EXTENSION(C4))
/// Configures basic options for a CABasicAnimation.
/// The options set in this method are favorable for the inner workings of C4’s action behaviours.
- (void)configureOptions;
@end


@interface CASpringAnimation (SWIFT_EXTENSION(C4))
/// Configures basic options for a CABasicAnimation.
/// The options set in this method are favorable for the inner workings of C4’s animation behaviours.
- (void)configureOptions;
@end


@interface CIColor (SWIFT_EXTENSION(C4))
@end

@class Image;

SWIFT_CLASS("_TtC2C46Camera")
@interface Camera : View
@property (nonatomic, strong) Image * _Nullable capturedImage;
@property (nonatomic, copy) NSString * _Nonnull quality;
- (void)captureImage;
- (void)didCaptureImage:(void (^ _Nullable)(void))action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCopyView:(View * _Nonnull)copyView SWIFT_UNAVAILABLE;
@end

@class NSBundle;
@class NSCoder;

/// The CanvasController class provides the infrastructure for managing the views of your iOS apps. A canvas controller manages a set of views that make up a portion of your app’s user interface. It is responsible for loading and disposing of those views, for managing interactions with those views, and for coordinating responses with any appropriate data objects. Canvas controllers also coordinate their efforts with other controller objects—including other view controllers—and help manage your app’s overall interface.
SWIFT_CLASS("_TtC2C416CanvasController")
@interface CanvasController : UIViewController
/// Called after the controller’s view is loaded into memory.
/// This override disables implicit CALayer animations, calls <code>setup()</code> and then re-enables animations.
/// You should <em>not</em> override this method, instead use <em>setup()</em>.
- (void)viewDidLoad;
/// Called during the controller’s <code>viewDidLoad()</code> method.
/// This method should be used to set up any objects or behaviours necessary when the controller’s view loads.
- (void)setup;
/// Overrides default behaviour of showing the app’s status bar. Defaults to <code>true</code>
///
/// returns:
/// a boolean value representing whether or not the app should hide its status bar
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Ellipse is a concrete subclass of Shape that has a special initialzer that creates an ellipse whose shape is defined by the object’s frame.
SWIFT_CLASS("_TtC2C47Ellipse")
@interface Ellipse : Shape
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Circle is a concrete subclass of Ellipse that has a special initialzer that creates a uniform ellipse.
SWIFT_CLASS("_TtC2C46Circle")
@interface Circle : Ellipse
@end


/// Curve is a concrete subclass of Shape that has a special initialzer that creates an bezier whose shape is defined by its end points and two control points.
SWIFT_CLASS("_TtC2C45Curve")
@interface Curve : Shape
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class GradientLayer;

/// The Gradient class draws a color gradient over its background color, filling the shape of the view (including rounded corners).
SWIFT_CLASS("_TtC2C48Gradient")
@interface Gradient : View
/// The background layer of the receiver.
@property (nonatomic, readonly, strong) GradientLayer * _Nonnull gradientLayer;
/// An optional array of Double values defining the location of each gradient stop. Animatable.
/// Defaults to [0,1]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull locations;
/// The current rotation value of the view. Animatable.
///
/// returns:
/// A Double value representing the cumulative rotation of the view, measured in Radians.
@property (nonatomic) double rotation;
- (nonnull instancetype)initWithCopy:(Gradient * _Nonnull)original;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCopyView:(View * _Nonnull)copyView OBJC_DESIGNATED_INITIALIZER;
@end

@protocol CAAction;

/// The GradientLayer class draws a color gradient over its background color, filling the shape of the layer (including rounded corners)
SWIFT_CLASS("_TtC2C413GradientLayer")
@interface GradientLayer : CAGradientLayer
/// A boolean value that, when true, prevents the animation of a shape’s properties.
/// This value can be set globally, after which changes to any shape’s properties will be immediate.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL disableActions;)
+ (BOOL)disableActions SWIFT_WARN_UNUSED_RESULT;
+ (void)setDisableActions:(BOOL)value;
/// The value of the receiver’s current rotation state.
/// This value is cumulative, and can represent values beyong +/- π
@property (nonatomic, readonly) double rotation;
/// This method searches for the given action object of the layer. Actions define dynamic behaviors for a layer. For example, the animatable properties of a layer typically have corresponding action objects to initiate the actual animations. When that property changes, the layer looks for the action object associated with the property name and executes it. You can also associate custom action objects with your layer to implement app-specific actions.
/// \param key The identifier of the action.
///
///
/// returns:
/// the action object assigned to the specified key.
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class ImageLayer;
@class UIImage;
@class CIImage;
@class ImageView;

/// A Image provides a view-based container for displaying a single image. You can create images from files, from other image objects, or from raw image data you receive.
SWIFT_CLASS("_TtC2C45Image")
@interface Image : View <NSCopying>
/// Shape’s contents are drawn on a ShapeLayer.
@property (nonatomic, readonly, strong) ImageLayer * _Nonnull imageLayer;
/// Initializes an empty Image
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Image using the specified filename from the bundle (i.e. your project), it will also grab images
/// from the web if the filename starts with http.
/// \code
/// let img = Image("logo")
/// canvas.add(img)
///
/// \endcode\param name The name of the image included in your project, or a web address.
///
- (nullable instancetype)init:(NSString * _Nonnull)name;
/// Initializes a new Image using the specified filename from the bundle (i.e. your project), it will also grab images
/// from the web if the filename starts with http.
/// \code
/// let img = Image("http://www.c4ios.com/images/logo@2x.png", scale: 2.0)
/// canvas.add(img)
///
/// \endcode\param name The name of the image included in your project, or a web address.
///
- (nullable instancetype)init:(NSString * _Nonnull)name scale:(double)scale;
/// Initializes a new Image using an existing Image (basically like copying).
/// \code
/// let a = Image("logo")
/// canvas.add(a)
/// let b = Image(image: a)
/// b.center = canvas.center
/// canvas.add(b)
///
/// \endcode\param image A Image.
///
- (nonnull instancetype)initWithCopy:(Image * _Nonnull)image;
/// Initializes a new Image using a UIImage.
/// \code
/// if let uii = UIImage(named:"logo") {
///     let img = Image(uiimage: uii)
///     canvas.add(img)
/// }
///
/// \endcode\param uiimage A UIImage object.
///
- (nonnull instancetype)initWithUiimage:(UIImage * _Nonnull)uiimage;
/// Initializes a new Image using a UIImage, with option for specifying the scale of the image.
/// \code
/// if let uii = UIImage(named:"logo") {
///     let img = Image(uiimage: uii, scale: 2.0)
///     canvas.add(img)
/// }
///
/// \endcode\param uiimage A UIImage object.
///
/// \param scale A <code>Double</code> should be larger than 0.0
///
- (nonnull instancetype)initWithUiimage:(UIImage * _Nonnull)uiimage scale:(double)scale;
/// Initializes a new Image using a CGImageRef.
/// \code
/// let cgi = CGImageCreate()
/// let img = Image(cgimage: cgi)
/// canvas.add(img)
///
/// \endcode<a href="https://gist.github.com/C4Framework/06319d420426cb0f1cb3">Example</a>
/// \param cgimage A CGImageRef object.
///
- (nonnull instancetype)initWithCgimage:(CGImageRef _Nonnull)cgimage;
/// Initializes a new Image using a CGImageRef, with option for specifying the scale of the image.
/// \code
/// let cgi = CGImageCreate()
/// let img = Image(cgimage: cgi, scale: 2.0)
/// canvas.add(img)
///
/// \endcode\param cgimage A CGImageRef object.
///
/// \param scale The scale of the image.
///
- (nonnull instancetype)initWithCgimage:(CGImageRef _Nonnull)cgimage scale:(double)scale;
/// Initializes a new Image using a CIImage.
/// Use this method if you’re working with the output of a CIFilter.
/// \param ciimage A CIImage object.
///
- (nonnull instancetype)initWithCiimage:(CIImage * _Nonnull)ciimage;
/// Initializes a new Image using a CIImage, with option for specifying the scale of the image.
/// Use this method if you’re working with the output of a CIFilter.
/// \param ciimage A CIImage object.
///
/// \param scale The scale of the image.
///
- (nonnull instancetype)initWithCiimage:(CIImage * _Nonnull)ciimage scale:(double)scale;
/// Initializes a new Image using raw data.
/// Use this if you download an image as data you can pass it here to create an image.
/// See the body of init(url:) to see how to download an image as data.
/// \param data An NSData object.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// Initializes a new Image using raw data, with option for specifying the scale of the image.
/// Use this if you download an image as data you can pass it here to create an image.
/// See the body of init(url:) to see how to download an image as data.
/// \param data An NSData object.
///
/// \param scale The scale of the image.
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data scale:(double)scale;
/// Initializes a new Image from an URL.
/// \code
///  if let url = NSURL(string: "http://www.c4ios.com/images/logo@2x.png") {
///      let img = Image(url: url)
///      canvas.add(img)
/// }
///
/// \endcode\param url An NSURL object.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Initializes a new Image from an URL, with option for specifying the scale of the image.
/// \code
/// if let url = NSURL(string: "http://www.c4ios.com/images/logo@2x.png") {
///     let img = Image(url: url, scale: 2.0)
///     canvas.add(img)
/// }
///
/// \endcode\param url An NSURL object.
///
/// \param scale The scale of the image.
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url scale:(double)scale;
/// Initializes a new Image using another image.
/// \param c4image An Image around which the new image is created.
///
- (nonnull instancetype)initWithC4image:(Image * _Nonnull)c4image;
/// Initializes a new copy of the receiver.
/// \param zone This parameter is ignored. Memory zones are no longer used by Objective-C.
///
///
/// returns:
/// a new instance that’s a copy of the receiver.
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// Returns the UIImageView of the object.
///
/// returns:
/// A UIImageView object.
@property (nonatomic, readonly, strong) ImageView * _Nonnull imageView;
/// Returns a UIImage representation of the receiver.
///
/// returns:
/// A UIImage object.
@property (nonatomic, readonly, strong) UIImage * _Nonnull uiimage;
/// Returns a CGImageRef representation of the receiver.
///
/// returns:
/// A CGImageRef object.
@property (nonatomic, readonly) CGImageRef _Nonnull cgImage;
/// Returns a CIImage representation of the receiver. Generally, this would be used to work with filters.
///
/// returns:
/// A CIImage object.
@property (nonatomic, readonly, strong) CIImage * _Nonnull ciImage;
/// An object that provides the contents of the layer. Animatable.
/// The default value of this property is nil.
/// If you are using the layer to display a static image, you can set this property to the CGImageRef containing the image
/// you want to display. Assigning a value to this property causes the layer to use your image rather than create a
/// separate backing store.
@property (nonatomic) CGImageRef _Nonnull contents;
/// The current rotation value of the view. Animatable.
///
/// returns:
/// A Double value representing the cumulative rotation of the view, measured in Radians.
@property (nonatomic) double rotation;
/// A variable that provides access to the width of the receiver. Animatable.
/// The default value of this property is defined by the image being created.
/// Assigning a value to this property causes the receiver to change the width of its frame. If the receiver’s
/// <code>contrainsProportions</code> variable is set to <code>true</code> the receiver’s height will change to match the new width.
@property (nonatomic) double width;
/// A variable that provides access to the height of the receiver. Animatable.
/// The default value of this property is defined by the image being created.
/// Assigning a value to this property causes the receiver to change the height of its frame. If the receiver’s
/// <code>contrainsProportions</code> variable is set to <code>true</code> the receiver’s width will change to match the new width.
@property (nonatomic) double height;
/// Assigning a value of true to this property will cause the receiver to scale its entire frame whenever its <code>width</code> or
/// <code>height</code> variables are set.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL constrainsProportions;
/// The original width/height ratio of the receiver when it was initialized.
@property (nonatomic, readonly) double originalRatio;
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCopyView:(View * _Nonnull)copyView SWIFT_UNAVAILABLE;
@end


@interface Image (SWIFT_EXTENSION(C4))
@end


@interface Image (SWIFT_EXTENSION(C4))
@end


@interface Image (SWIFT_EXTENSION(C4))
/// Initializes and returns a new cgimage from the color at a specified point in the receiver.
/// \code
/// let image = cgimage(at: CGPoint())
///
/// \endcode\param at a CGPoint.
///
- (CGImageRef _Nullable)cgimageAt:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
@end


@interface Image (SWIFT_EXTENSION(C4))
@end


/// Subclass of CALayer that handles animating its contents.
SWIFT_CLASS("_TtC2C410ImageLayer")
@interface ImageLayer : CALayer
/// Configures basic options for a CABasicAnimation.
/// The options set in this method are favorable for the inner workings of C4’s animation behaviours.
/// \param key The identifier of the action.
///
///
/// returns:
/// The object that provides the action for key.
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The value of the receiver’s current rotation state.
/// This value is cumulative, and can represent values beyong +/- π
@property (nonatomic, readonly) double rotation;
/// Initializes a new C4Layer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new C4Layer from a specified layer of any other type.
/// \param layer Another CALayer
///
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new C4Layer from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Sets a value for a given key.
/// \param value The value for the property identified by key.
///
/// \param key The name of one of the receiver’s properties
///
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
/// Returns a Boolean indicating whether changes to the specified key require the layer to be redisplayed.
/// \param key A string that specifies an attribute of the layer.
///
///
/// returns:
/// A Boolean indicating whether changes to the specified key require the layer to be redisplayed.
+ (BOOL)needsDisplayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Reloads the content of this layer.
/// Do not call this method directly.
- (void)display;
@end


/// A subclass of CALayer that has a rotation property.
SWIFT_CLASS("_TtC2C45Layer")
@interface Layer : CALayer
/// The value of the receiver’s current rotation state.
/// This value is cumulative, and can represent values beyong +/- π
@property (nonatomic, readonly) double rotation;
/// Initializes a new Layer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Layer from a specified layer of any other type.
/// \param layer Another CALayer
///
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Layer from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Sets a value for a given key.
/// \param value The value for the property identified by key.
///
/// \param key The name of one of the receiver’s properties
///
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
/// This method searches for the given action object of the layer. Actions define dynamic behaviors for a layer. For example, the animatable properties of a layer typically have corresponding action objects to initiate the actual animations. When that property changes, the layer looks for the action object associated with the property name and executes it. You can also associate custom action objects with your layer to implement app-specific actions.
/// \param key The identifier of the action.
///
///
/// returns:
/// the action object assigned to the specified key.
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Returns a Boolean indicating whether changes to the specified key require the layer to be redisplayed.
/// \param key A string that specifies an attribute of the layer.
///
///
/// returns:
/// A Boolean indicating whether changes to the specified key require the layer to be redisplayed.
+ (BOOL)needsDisplayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Reloads the content of this layer.
/// Do not call this method directly.
- (void)display;
@end


/// Polygon is a concrete subclass of Shape that has a special initialzer that creates a non-uniform shape made up of 3 or more points.
SWIFT_CLASS("_TtC2C47Polygon")
@interface Polygon : Shape
/// Initializes a default Polygon.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new Polygon from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Closes the shape.
/// This method appends a line between the shape’s last point and its first point.
- (void)close;
@end


/// Line is a is a concrete subclass of Polygon that contains only two points.
/// This subclass overrides the <code>points</code> variable so that it can only ever have 2 points, and also has an <code>endPoints</code> variable that allows the user to edit either end of the line (animatable).
SWIFT_CLASS("_TtC2C44Line")
@interface Line : Polygon
/// Initializes a new Polygon from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// This document describes the Movie class. You use a Movie object to implement the playback of video files, it encapulates an AVQueuePlayer object which handles the loading and control of assets.
/// The Movie class is meant to simplify the addition of videos to your application. It is also a subclass of View, and so has all the common animation, interaction and notification capabilities.
/// A C4Movie’s resizing behaviour is to map itself to the edges of its visible frame. This functionality implicitly uses AVLayerVideoGravityResize as its layer’s default gravity. You can change the frame of the movie from an arbitrary shape back to its original proportion by using its originalSize, originalRatio, or by independently setting either its width or height properties.
SWIFT_CLASS("_TtC2C45Movie")
@interface Movie : View
/// Assigning a value of true to this property will cause the receiver to loop at the end of playback.
/// The default value of this property is <code>true</code>.
@property (nonatomic) BOOL loops;
/// Mute/Unmute the audio track.
/// The default value of this property is <code>false</code>.
@property (nonatomic) BOOL muted;
/// A variable that provides access to the width of the receiver. Animatable.
/// The default value of this property is defined by the movie being created.
/// Assigning a value to this property causes the receiver to change the width of its frame. If the receiver’s
/// <code>contrainsProportions</code> variable is set to <code>true</code> the receiver’s height will change to match the new width.
@property (nonatomic) double width;
/// A variable that provides access to the height of the receiver. Animatable.
/// The default value of this property is defined by the movie being created.
/// Assigning a value to this property causes the receiver to change the height of its frame. If the receiver’s
/// <code>contrainsProportions</code> variable is set to <code>true</code> the receiver’s width will change to match the new height.
@property (nonatomic) double height;
/// Assigning a value of true to this property will cause the receiver to scale its entire frame whenever its <code>width</code> or
/// <code>height</code> variables are set.
/// The default value of this property is <code>true</code>.
@property (nonatomic) BOOL constrainsProportions;
/// The original width/height ratio of the receiver when it was initialized.
@property (nonatomic, readonly) double originalRatio;
@property (nonatomic, readonly) BOOL playing;
/// The current rotation value of the view. Animatable.
///
/// returns:
/// A Double value representing the cumulative rotation of the view, measured in Radians.
@property (nonatomic) double rotation;
/// Initializes a new Movie using the specified filename from the bundle (i.e. your project).
/// \param filename The name of the movie file included in your project.
///
- (nullable instancetype)init:(NSString * _Nonnull)filename;
- (nullable instancetype)initWithCopy:(Movie * _Nonnull)original;
/// Begins playback of the current item.
/// This is the same as setting rate to 1.0.
- (void)play;
/// Pauses playback.
/// This is the same as setting rate to 0.0.
- (void)pause;
/// Stops playback.
/// This is the same as setting rate to 0.0 and resetting the current time to 0.
- (void)stop;
/// The action to perform at the end of playback.
/// \param action A block of code to execute at the end of playback.
///
- (void)reachedEnd:(void (^ _Nullable)(void))action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCopyView:(View * _Nonnull)copyView SWIFT_UNAVAILABLE;
@end


@interface NSObject (SWIFT_EXTENSION(C4))
/// Posts a new notification originating from the receiver.
/// \code
/// canvas.addTapGestureRecognizer { location, state in
///     self.canvas.post("tapped")
/// }
///
/// \endcode\param event The notification name for the event
///
- (void)post:(NSString * _Nonnull)event;
/// An action to run on receipt of a given event.
/// \code
/// canvas.on(event: "tapped") {
///     println("received tap")
/// }
///
/// \endcode\param event The notification name to listen for
///
/// \param run A block of code to run when the receiver “hears” the specified event name
///
///
/// returns:
/// A token to use for cancelling the action.
- (id _Nonnull)onEvent:(NSString * _Nonnull)notificationName run:(void (^ _Nonnull)(void))executionBlock;
/// Register an action to run when an event is triggered by the specified sender. Returns an observer handle you can use to cancel the action.
/// \code
/// canvas.on(event: "tapped", from: anObject) {
///     print("obj was tapped")
/// }
///
/// \endcode\param notificationName The notification name to listen for
///
/// \param sender The object from which to listen for the notification
///
/// \param executionBlock A block of code to run when the receiver “hears” the specified notification name
///
///
/// returns:
/// A token to use for cancelling the action.
- (id _Nonnull)onEvent:(NSString * _Nonnull)notificationName from:(id _Nullable)sender run:(void (^ _Nonnull)(void))executionBlock;
/// Cancels any actions registered to run for a specified object.
/// \code
/// canvas.cancel(self)
///
/// \endcode\param token A token returned from a call to <code>on(event:run:)</code> method
///
- (void)cancel:(id _Nonnull)token;
@end


@interface NSValue (SWIFT_EXTENSION(C4))
@end


/// Extension for CAShapeLayer that allows overriding the actions for specific properties.
SWIFT_CLASS("_TtC2C411PlayerLayer")
@interface PlayerLayer : AVPlayerLayer
/// A boolean value that, when true, prevents the animation of a shape’s properties.
/// \code
/// ShapeLayer.disableActions = true
/// circle.fillColor = red
/// ShapeLayer.disableActions = false
///
/// This value can be set globally, after which changes to any shape's properties will be immediate.
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL disableActions;)
+ (BOOL)disableActions SWIFT_WARN_UNUSED_RESULT;
+ (void)setDisableActions:(BOOL)value;
/// This method searches for the given action object of the layer. Actions define dynamic behaviors for a layer. For example, the animatable properties of a layer typically have corresponding action objects to initiate the actual animations. When that property changes, the layer looks for the action object associated with the property name and executes it. You can also associate custom action objects with your layer to implement app-specific actions.
/// \param key The identifier of the action.
///
///
/// returns:
/// the action object assigned to the specified key.
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The value of the receiver’s current rotation state.
/// This value is cumulative, and can represent values beyong +/- π
@property (nonatomic, readonly) double rotation;
/// Initializes a new C4Layer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new C4Layer from a specified layer of any other type.
/// \param layer Another CALayer
///
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new C4Layer from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Sets a value for a given key.
/// \param value The value for the property identified by key.
///
/// \param key The name of one of the receiver’s properties
///
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
/// Returns a Boolean indicating whether changes to the specified key require the layer to be redisplayed.
/// \param key A string that specifies an attribute of the layer.
///
///
/// returns:
/// A Boolean indicating whether changes to the specified key require the layer to be redisplayed.
+ (BOOL)needsDisplayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Reloads the content of this layer.
/// Do not call this method directly.
- (void)display;
@end



/// QuadCurve is a concrete subclass of Curve that modifies it shape based on a single point rather than 2 used by its parent class.
SWIFT_CLASS("_TtC2C49QuadCurve")
@interface QuadCurve : Curve
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Rectangle is a concrete subclass of Shape that has a special initialzer that creates a rectangle whose shape is determined by its frame.
SWIFT_CLASS("_TtC2C49Rectangle")
@interface Rectangle : Shape
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// RegularPolygon is a is a concrete subclass of Polygon that defines a shape whose sides are uniform (e.g. pentagon, octagon, etc.).
/// This class defines two variables called <code>sides</code> and <code>phase</code> that represent the number of sides and the initial rotation of the shape (respectively). The default shape is a hexagon.
SWIFT_CLASS("_TtC2C414RegularPolygon")
@interface RegularPolygon : Polygon
/// Returns the number of sides in the polygon.
/// Assigning a value to this property will change the number of sides and cause the receiver to automatically update its
/// path.
/// \code
/// let f = Rect(100,100,100,100)
/// var p = RegularPolygon(frame: f)
/// p.sides = 3
/// canvas.add(p)
///
/// \endcode
@property (nonatomic) NSInteger sides;
/// Returns the phase (i.e. “rotated” beginning position) of the shape. This is not actual rotation, it simply changes
/// where the beginning of the shape is.
/// Assigning a value to this property will change the starting position of the beginning of the shape. The shape will
/// still calculate its points based on the frame.
/// \code
/// let f = Rect(100,100,100,100)
/// var p = RegularPolygon(frame: f)
/// p.phase = M_PI_2
/// canvas.add(p)
///
/// \endcode
@property (nonatomic) double phase;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class RPPreviewViewController;

SWIFT_CLASS("_TtC2C414ScreenRecorder")
@interface ScreenRecorder : NSObject <RPPreviewViewControllerDelegate>
@property (nonatomic, copy) void (^ _Nullable previewFinishedAction)(NSSet<NSString *> * _Nullable);
@property (nonatomic, copy) void (^ _Nullable recordingEndedAction)(void);
@property (nonatomic) BOOL enableMicrophone;
@property (nonatomic, readonly) BOOL recording;
@property (nonatomic, readonly) BOOL available;
- (void)start;
- (void)start:(double)duration;
- (void)stop;
- (void)showPreviewInController:(UIViewController * _Nonnull)controller;
- (void)previewController:(RPPreviewViewController * _Nonnull)previewController didFinishWithActivityTypes:(NSSet<NSString *> * _Nonnull)activityTypes;
- (void)previewControllerDidFinish:(RPPreviewViewController * _Nonnull)previewController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface Shape (SWIFT_EXTENSION(C4))
/// Creates a flattened image of the receiver and its subviews / layers.
/// This override takes into consideration the lineWidth of the receiver.
///
/// returns:
/// A new Image
- (Image * _Nullable)render SWIFT_WARN_UNUSED_RESULT;
@end


@interface Shape (SWIFT_EXTENSION(C4))
@end


/// Extension for CAShapeLayer that allows overriding the actions for specific properties.
SWIFT_CLASS("_TtC2C410ShapeLayer")
@interface ShapeLayer : CAShapeLayer
/// A boolean value that, when true, prevents the animation of a shape’s properties.
/// \code
/// ShapeLayer.disableActions = true
/// circle.fillColor = red
/// ShapeLayer.disableActions = false
///
/// This value can be set globally, after which changes to any shape's properties will be immediate.
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL disableActions;)
+ (BOOL)disableActions SWIFT_WARN_UNUSED_RESULT;
+ (void)setDisableActions:(BOOL)value;
/// This method searches for the given action object of the layer. Actions define dynamic behaviors for a layer. For example, the animatable properties of a layer typically have corresponding action objects to initiate the actual animations. When that property changes, the layer looks for the action object associated with the property name and executes it. You can also associate custom action objects with your layer to implement app-specific actions.
/// \param key The identifier of the action.
///
///
/// returns:
/// the action object assigned to the specified key.
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// The value of the receiver’s current rotation state.
/// This value is cumulative, and can represent values beyong +/- π
@property (nonatomic, readonly) double rotation;
/// Initializes a new C4Layer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new C4Layer from a specified layer of any other type.
/// \param layer Another CALayer
///
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new C4Layer from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Sets a value for a given key.
/// \param value The value for the property identified by key.
///
/// \param key The name of one of the receiver’s properties
///
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
/// Returns a Boolean indicating whether changes to the specified key require the layer to be redisplayed.
/// \param key A string that specifies an attribute of the layer.
///
///
/// returns:
/// A Boolean indicating whether changes to the specified key require the layer to be redisplayed.
+ (BOOL)needsDisplayForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Reloads the content of this layer.
/// Do not call this method directly.
- (void)display;
@end


/// Star is a concrete subclass of Polygon that defines a star shape.
SWIFT_CLASS("_TtC2C44Star")
@interface Star : Polygon
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// TextShape defines a concrete subclass of Shape that draws a bezier curve whose shape looks like text.
SWIFT_CLASS("_TtC2C49TextShape")
@interface TextShape : Shape
/// The text used to define the shape’s path. Defaults to “C4”.
@property (nonatomic, copy) NSString * _Nonnull text;
/// Initializes an empty TextShape.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initializes a new TextShape from a specifed string, using C4’s default font.
/// \code
/// let t = TextShape(text:"C4")
/// t.center = canvas.center
/// canvas.add(t)
///
/// \endcode\param text text The string to be rendered as a shape
///
- (nullable instancetype)initWithText:(NSString * _Nonnull)text;
@end


/// You use the Timer class to create timer objects or, more simply, timers. A timer waits until a certain time interval has elapsed and then fires, executing a specified block of code.
SWIFT_CLASS("_TtC2C45Timer")
@interface Timer : NSObject
/// The current number of times the timer has fired.
@property (nonatomic, readonly) NSInteger step;
/// The number of times the timer will fire.
@property (nonatomic, readonly) NSInteger count;
/// The time interval between firing.
@property (nonatomic, readonly) double interval;
/// Initializes a new timer.
/// \code
/// let t = Timer(0.25) {
///     print("tick")
/// }
///
/// \endcode\param interval the time between firing
///
/// \param count the total number of times the timer should fire, defaults to Int.max
///
/// \param action a block of code to execute
///
- (nonnull instancetype)initWithInterval:(double)interval count:(NSInteger)count action:(void (^ _Nonnull)(void))action OBJC_DESIGNATED_INITIALIZER;
/// Tells the timer to fire, i.e. execute its block of code.
- (void)fire;
/// Tells the timer to attach itself to the main run loop of an application, after calling <code>start</code> the timer will continue firing until the timer reaches its <code>count</code> or is otherwise stopped.
- (void)start;
/// Pauses the execution of the timer.
- (void)pause;
/// Stops the timer and resets its step to 0.
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Triangle defines a concrete subclass of Polygon whose shape is a closed triangle.
SWIFT_CLASS("_TtC2C48Triangle")
@interface Triangle : Polygon
/// Initializes a new Polygon from data in a given unarchiver.
/// \param coder An unarchiver object.
///
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(C4))
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIImage (SWIFT_EXTENSION(C4))
/// Create an image with a solid color.
/// \param color The color to use when creating the image.
///
/// \param size The size of image to create.
///
///
/// returns:
/// A UIImage filled with the specified color and whose dimensions equal the give size
+ (UIImage * _Nonnull)createWithColor:(UIColor * _Nonnull)color size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


@interface UILongPressGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIPanGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIPinchGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIRotationGestureRecognizer (SWIFT_EXTENSION(C4))
/// The closure to call when there is a gesture event.
@property (nonatomic, copy) void (^ _Nullable rotationAction)(double, double, UIGestureRecognizerState);
@end


@interface UIScreenEdgePanGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UISwipeGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UITapGestureRecognizer (SWIFT_EXTENSION(C4))
@end


@interface UIView (SWIFT_EXTENSION(C4))
@end


@interface UIViewController (SWIFT_EXTENSION(C4))
/// Returns a View object representation of the controller’s <code>view</code> property.
@property (nonatomic, readonly, strong) View * _Nonnull canvas;
@end



@interface View (SWIFT_EXTENSION(C4))
/// Creates a flattened image of the receiver and its subviews / layers.
///
/// returns:
/// A new Image
- (Image * _Nullable)render SWIFT_WARN_UNUSED_RESULT;
@end


@interface View (SWIFT_EXTENSION(C4))
/// Sets the arbitrary keyed-data for the specified key.
/// \param value The value for the key identified by <em>key</em>.
///
/// \param key The name of one of the receiver’s properties.
///
- (void)setValue:(id _Nullable)value forKey:(NSString * _Nonnull)key;
/// Returns the arbitrary keyed-data specified by the given key.
/// \param key The name of one of the receiver’s properties.
///
///
/// returns:
/// The value for the data specified by the key.
- (id _Nullable)valueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface View (SWIFT_EXTENSION(C4))
/// A class-level function that executes an animation using a specified block of code.
/// \param duration The length of time in seconds for the animation to execute.
///
/// \param animations A block of code with specified animations to execute.
///
+ (void)animateWithDuration:(double)duration animations:(void (^ _Nonnull)(void))animations;
/// A class-level function that executes an animation using a specified block of code, with parameters for delaying and completion.
/// \param duration The length of time in seconds for the animation to execute.
///
/// \param delay The length of time in seconds to wait before executing the specified block of code.
///
/// \param completion A block of code to execute when the animation completes.
///
/// \param animations A block of code with specified animations to execute.
///
+ (void)animateWithDuration:(double)duration delay:(double)delay animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
/// A class-level function that executes an animation using a specified block of code, with parameters for delaying, completion and animation options.
/// \param duration The length of time in seconds for the animation to execute.
///
/// \param delay The length of time in seconds to wait before executing the specified block of code.
///
/// \param options Options for animating views using block objects, see: UIViewAnimationOptions.
///
/// \param animations A block of code with specified animations to execute.
///
/// \param completion A block of code to execute when the animation completes.
///
+ (void)animateWithDuration:(double)duration delay:(double)delay options:(UIViewAnimationOptions)options animations:(void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(BOOL))completion;
@end


@interface View (SWIFT_EXTENSION(C4))
@end


@interface View (SWIFT_EXTENSION(C4))
@end


/// Wedge is a concrete subclass of Shape whose shape is a wedge with a rounded outer edge.
SWIFT_CLASS("_TtC2C45Wedge")
@interface Wedge : Shape
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
