// Generated by Apple Swift version 3.1 (swiftlang-802.0.48 clang-802.0.38)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import AVFoundation;
@import UIKit;
@import CoreGraphics;
@import C4;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class AVAudioPCMBuffer;

SWIFT_CLASS("_TtC8Swix_DSP16AVTonePlayerUnit")
@interface AVTonePlayerUnit : AVAudioPlayerNode
@property (nonatomic, readonly) AVAudioFrameCount bufferCapacity;
@property (nonatomic, readonly) double sampleRate;
@property (nonatomic) double frequency;
@property (nonatomic) double amplitude;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (AVAudioPCMBuffer * _Nonnull)prepareBuffer SWIFT_WARN_UNUSED_RESULT;
- (void)fillBuffer:(AVAudioPCMBuffer * _Nonnull)buffer;
- (void)scheduleBuffer;
- (void)preparePlaying;
@end

@class UIWindow;
@class UIApplication;

SWIFT_CLASS("_TtC8Swix_DSP11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
/// set orientations you want to be allowed in this property by default
@property (nonatomic) UIInterfaceOrientationMask orientationLock;
- (UIInterfaceOrientationMask)application:(UIApplication * _Nonnull)application supportedInterfaceOrientationsForWindow:(UIWindow * _Nullable)window SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Walkthrough Page:
/// The walkthrough page represents any page added to the Walkthrough.
SWIFT_PROTOCOL("_TtP8Swix_DSP17BWWalkthroughPage_")
@protocol BWWalkthroughPage
/// While sliding to the “next” slide (from right to left), the “current” slide changes its offset from 1.0 to 2.0 while the “next” slide changes it from 0.0 to 1.0
/// While sliding to the “previous” slide (left to right), the current slide changes its offset from 1.0 to 0.0 while the “previous” slide changes it from 2.0 to 1.0
/// The other pages update their offsets whith values like 2.0, 3.0, -2.0… depending on their positions and on the status of the walkthrough
/// This value can be used on the previous, current and next page to perform custom animations on page’s subviews.
- (void)walkthroughDidScrollTo:(CGFloat)to offset:(CGFloat)offset;
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC8Swix_DSP31BWWalkthroughPageViewController")
@interface BWWalkthroughPageViewController : UIViewController <BWWalkthroughPage>
@property (nonatomic) CGPoint speed;
@property (nonatomic) CGPoint speedVariance;
@property (nonatomic, copy) NSString * _Nonnull animationType;
@property (nonatomic) BOOL animateAlpha;
@property (nonatomic, copy) NSString * _Nonnull staticTags;
- (void)viewDidLoad;
- (void)walkthroughDidScrollTo:(CGFloat)to offset:(CGFloat)offset;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BWWalkthroughViewControllerDelegate;
@class UIPageControl;
@class UIButton;
@class UIScrollView;
@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC8Swix_DSP27BWWalkthroughViewController")
@interface BWWalkthroughViewController : UIViewController <UIScrollViewDelegate>
@property (nonatomic, weak) id <BWWalkthroughViewControllerDelegate> _Nullable delegate;
@property (nonatomic, strong) IBOutlet UIPageControl * _Nullable pageControl;
@property (nonatomic, strong) IBOutlet UIButton * _Nullable nextButton;
@property (nonatomic, strong) IBOutlet UIButton * _Nullable prevButton;
@property (nonatomic, strong) IBOutlet UIButton * _Nullable closeButton;
@property (nonatomic, readonly) NSInteger currentPage;
@property (nonatomic, readonly, strong) UIViewController * _Nonnull currentViewController;
@property (nonatomic, readonly) NSInteger numberOfPages;
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollview;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (IBAction)nextPage;
- (IBAction)prevPage;
/// If you want to implement a “skip” button
/// connect the button to this IBAction and implement the delegate with the skipWalkthrough
- (IBAction)close:(id _Nonnull)sender;
- (void)pageControlDidTouch;
/// Add a new page to the walkthrough.
/// To have information about the current position of the page in the walkthrough add a UIVIewController which implements BWWalkthroughPage
/// <ul>
///   <li>
///     viewController: The view controller that will be added at the end of the view controllers list.
///   </li>
/// </ul>
- (void)addWithViewController:(UIViewController * _Nonnull)viewController;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)sv;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end


/// Walkthrough Delegate:
/// This delegate performs basic operations such as dismissing the Walkthrough or call whatever action on page change.
/// Probably the Walkthrough is presented by this delegate.
SWIFT_PROTOCOL("_TtP8Swix_DSP35BWWalkthroughViewControllerDelegate_")
@protocol BWWalkthroughViewControllerDelegate
@optional
- (void)walkthroughCloseButtonPressed;
- (void)walkthroughNextButtonPressed;
- (void)walkthroughPrevButtonPressed;
- (void)walkthroughPageDidChange:(NSInteger)pageNumber;
@end

@class BarChartView;
@class UIStoryboardSegue;

SWIFT_CLASS("_TtC8Swix_DSP17BarViewController")
@interface BarViewController : UIViewController
@property (nonatomic, strong) IBOutlet BarChartView * _Null_unspecified barChartView;
- (void)viewDidLoad;
- (void)update;
- (IBAction)changeMagnitudes:(id _Nonnull)sender;
- (void)didReceiveMemoryWarning;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8Swix_DSP18CookViewController")
@interface CookViewController : UIPageViewController <UIPageViewControllerDelegate, UIPageViewControllerDataSource>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull pages;
@property (nonatomic, copy) NSArray<UIViewController *> * _Nonnull vcs;
@property (nonatomic, strong) UIButton * _Null_unspecified button;
@property (nonatomic) BOOL enableScrolling;
- (void)viewDidLoad;
- (void)scrolling;
- (void)update;
- (void)viewDidAppear:(BOOL)animated;
- (void)dismissView;
- (void)didReceiveMemoryWarning;
- (void)viewDidDisappear:(BOOL)animated;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)presentationIndexForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImageView;
@class UILabel;

SWIFT_CLASS("_TtC8Swix_DSP18DemoViewController")
@interface DemoViewController : UIViewController
@property (nonatomic, weak) IBOutlet BarChartView * _Null_unspecified barChartView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified speedLabel;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified speedView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified proxView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified label;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified proxLabel;
- (void)viewDidLoad;
- (void)update;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)proxUpdate;
- (void)didReceiveMemoryWarning;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class Line;
@class Circle;

SWIFT_CLASS("_TtC8Swix_DSP20SplashViewController")
@interface SplashViewController : CanvasController <BWWalkthroughViewControllerDelegate>
@property (nonatomic) NSInteger numPoints;
@property (nonatomic, copy) NSArray<Line *> * _Nonnull sineWaveCircles;
@property (nonatomic, copy) NSArray<Circle *> * _Nonnull sineWaveCircles2;
@property (nonatomic, readonly) double margin;
@property (nonatomic) double theta;
@property (nonatomic) double theta2;
@property (nonatomic) double period;
@property (nonatomic) double amp;
@property (nonatomic) double spacing;
@property (nonatomic, strong) BWWalkthroughViewController * _Null_unspecified walkthrough;
- (void)setup;
- (IBAction)triggerWalkthrough:(id _Nonnull)sender;
- (void)walkthroughCloseButtonPressed;
- (void)updateTheta;
- (void)updateAmp;
- (void)createSineWave;
- (void)renderSineWave;
- (void)updateSineWave;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class RegularPolygon;

SWIFT_CLASS("_TtC8Swix_DSP14ViewController")
@interface ViewController : CanvasController
@property (nonatomic, strong) UIButton * _Null_unspecified closeButton;
@property (nonatomic) NSInteger numSquares;
@property (nonatomic, copy) NSArray<RegularPolygon *> * _Nonnull hexagons;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull points;
@property (nonatomic) BOOL tapToggle;
@property (nonatomic) BOOL tapToggle2;
- (void)setup;
- (RegularPolygon * _Nonnull)createHexagonWithD:(double)d SWIFT_WARN_UNUSED_RESULT;
- (void)update;
- (void)proxUpdate;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
- (void)closeArt;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;

SWIFT_CLASS("_TtC8Swix_DSP17WebViewController")
@interface WebViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, strong) WKWebView * _Null_unspecified webView;
@property (nonatomic, strong) UIButton * _Null_unspecified button;
@property (nonatomic, strong) UIButton * _Null_unspecified upbutton;
@property (nonatomic, strong) UIButton * _Null_unspecified dnbutton;
@property (nonatomic, strong) UIScrollView * _Null_unspecified scroll;
@property (nonatomic) CGFloat yPos;
@property (nonatomic) BOOL enableScrolling;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (void)update;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)dismissView;
- (void)scrollUp;
- (void)scrollDown;
- (void)scrolling;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
